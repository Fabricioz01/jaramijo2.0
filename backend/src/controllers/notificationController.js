const Notification = require('../models/Notification');

class NotificationController {
  // Obtener notificaciones del usuario autenticado
  async getUserNotifications(req, res, next) {
    try {
      const userId = req.user._id || req.user.userId;
      console.log(
        'üîî [NotificationController] Obteniendo notificaciones para usuario:',
        userId
      );
      console.log('üîî [NotificationController] Usuario completo:', {
        id: req.user._id,
        email: req.user.email,
        name: req.user.name,
      });

      const { limit = 20, skip = 0, unreadOnly = false } = req.query;

      const options = {
        limit: parseInt(limit),
        skip: parseInt(skip),
        unreadOnly: unreadOnly === 'true',
      };

      const notifications = await Notification.getByUserId(userId, options);

      console.log(
        `‚úÖ [NotificationController] ${notifications.length} notificaciones encontradas`
      );

      res.json({
        success: true,
        data: notifications,
        count: notifications.length,
      });
    } catch (error) {
      console.error(
        '‚ùå [NotificationController] Error al obtener notificaciones:',
        error
      );
      next(error);
    }
  }

  // Marcar notificaci√≥n como le√≠da
  async markAsRead(req, res, next) {
    try {
      const { notificationId } = req.params;
      console.log(
        'üìñ [NotificationController] Marcando notificaci√≥n como le√≠da:',
        notificationId
      );

      const notification = await Notification.findById(notificationId);

      if (!notification) {
        return res.status(404).json({
          success: false,
          message: 'Notificaci√≥n no encontrada',
        });
      }

      // Verificar que la notificaci√≥n pertenece al usuario autenticado
      if (notification.userId.toString() !== req.user._id.toString()) {
        return res.status(403).json({
          success: false,
          message: 'No tienes permisos para modificar esta notificaci√≥n',
        });
      }

      const updatedNotification = await Notification.markAsRead(notificationId);

      res.json({
        success: true,
        message: 'Notificaci√≥n marcada como le√≠da',
        data: updatedNotification,
      });
    } catch (error) {
      console.error(
        '‚ùå [NotificationController] Error al marcar como le√≠da:',
        error
      );
      next(error);
    }
  }

  // Marcar todas las notificaciones como le√≠das
  async markAllAsRead(req, res, next) {
    try {
      const userId = req.user._id || req.user.userId;
      console.log(
        'üìñ [NotificationController] Marcando todas las notificaciones como le√≠das para usuario:',
        userId
      );

      const result = await Notification.updateMany(
        { userId: userId, read: false },
        {
          read: true,
          readAt: new Date(),
        }
      );

      console.log(
        `‚úÖ [NotificationController] ${result.modifiedCount} notificaciones marcadas como le√≠das`
      );

      res.json({
        success: true,
        message: `${result.modifiedCount} notificaciones marcadas como le√≠das`,
        modifiedCount: result.modifiedCount,
      });
    } catch (error) {
      console.error(
        '‚ùå [NotificationController] Error al marcar todas como le√≠das:',
        error
      );
      next(error);
    }
  }

  // Eliminar notificaci√≥n
  async deleteNotification(req, res, next) {
    try {
      const { notificationId } = req.params;
      console.log(
        'üóëÔ∏è [NotificationController] Eliminando notificaci√≥n:',
        notificationId
      );

      const notification = await Notification.findById(notificationId);

      if (!notification) {
        return res.status(404).json({
          success: false,
          message: 'Notificaci√≥n no encontrada',
        });
      }

      // Verificar que la notificaci√≥n pertenece al usuario autenticado
      if (notification.userId.toString() !== req.user._id.toString()) {
        return res.status(403).json({
          success: false,
          message: 'No tienes permisos para eliminar esta notificaci√≥n',
        });
      }

      await Notification.findByIdAndDelete(notificationId);

      console.log(
        '‚úÖ [NotificationController] Notificaci√≥n eliminada exitosamente'
      );

      res.json({
        success: true,
        message: 'Notificaci√≥n eliminada exitosamente',
      });
    } catch (error) {
      console.error(
        '‚ùå [NotificationController] Error al eliminar notificaci√≥n:',
        error
      );
      next(error);
    }
  }

  // Obtener conteo de notificaciones no le√≠das
  async getUnreadCount(req, res, next) {
    try {
      const userId = req.user._id || req.user.userId;
      console.log(
        'üî¢ [NotificationController] Obteniendo conteo de no le√≠das para usuario:',
        userId
      );

      const count = await Notification.countDocuments({
        userId: userId,
        read: false,
      });

      console.log(
        `‚úÖ [NotificationController] ${count} notificaciones no le√≠das`
      );

      res.json({
        success: true,
        count: count,
      });
    } catch (error) {
      console.error(
        '‚ùå [NotificationController] Error al obtener conteo:',
        error
      );
      next(error);
    }
  }
}

module.exports = new NotificationController();
